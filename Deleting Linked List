#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int val;
    struct ListNode* next;
};


struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}


void displayList(struct ListNode* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct ListNode* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->val);
        temp = temp->next;
    }
    printf("NULL\n");
}


struct ListNode* deleteFirst(struct ListNode* head) {
    if (head == NULL) {
        printf("List is empty. No node to delete.\n");
        return NULL;
    }
    struct ListNode* temp = head;
    head = head->next;
    free(temp);
    return head;
}


struct ListNode* deleteLast(struct ListNode* head) {
    if (head == NULL) {
        printf("List is empty. No node to delete.\n");
        return NULL;
    }
    if (head->next == NULL) {
        free(head);
        return NULL;
    }
    
    struct ListNode* temp = head;
    while (temp->next && temp->next->next) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
    return head;
}


struct ListNode* deleteElement(struct ListNode* head, int value) {
    if (head == NULL) {
        printf("List is empty. No node to delete.\n");
        return NULL;
    }
    if (head->val == value) {
        struct ListNode* temp = head;
        head = head->next;
        free(temp);
        return head;
    }
    
    struct ListNode* temp = head;
    while (temp->next != NULL && temp->next->val != value) {
        temp = temp->next;
    }
    
    if (temp->next != NULL) {
        struct ListNode* delNode = temp->next;
        temp->next = temp->next->next;
        free(delNode);
    } else {
        printf("Element %d not found in the list.\n", value);
    }
    return head;
}

int main() {
    struct ListNode* head = NULL;
    
    
    head = createNode(10);
    head->next = createNode(20);
    head->next->next = createNode(30);
    head->next->next->next = createNode(40);
    
    printf("Original List: ");
    displayList(head);
    
    head = deleteFirst(head);
    printf("After deleting the first element: ");
    displayList(head);
    
  
    head = deleteLast(head);
    printf("After deleting the last element: ");
    displayList(head);
    
   
    head = deleteElement(head, 20);
    printf("After deleting element 20: ");
    displayList(head);
    
   
    head = deleteElement(head, 50);
    printf("After trying to delete element 50: ");
    displayList(head);
    
    return 0;
}
