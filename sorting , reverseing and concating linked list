#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int value;
    struct ListNode* next;
};

struct ListNode* sort(struct ListNode* head) {
    if (head == NULL) {
        return NULL;
    }

    struct ListNode *i, *j;
    int temp;

    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->value > j->value) {
                temp = i->value;
                i->value = j->value;
                j->value = temp;
            }
        }
    }
    return head;
}

struct ListNode* reverse_list(struct ListNode* head) {
    struct ListNode *prev = NULL, *current = head, *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}

struct ListNode* create_node(int value) {
    struct ListNode* new_node = (struct ListNode*)malloc(sizeof(struct ListNode));
    new_node->value = value;
    new_node->next = NULL;
    return new_node;
}

void print_list(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf("%d -> ", current->value);
        current = current->next;
    }
    printf("NULL\n");
}

struct ListNode* concatenate(struct ListNode* list1, struct ListNode* list2) {
    if (list1 == NULL) {
        return list2;
    }

    struct ListNode* current = list1;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = list2;
    return list1;
}

int main() {
    struct ListNode* head1 = create_node(4);
    head1->next = create_node(3);
    head1->next->next = create_node(1);
    head1->next->next->next = create_node(2);

    struct ListNode* head2 = create_node(7);
    head2->next = create_node(5);
    head2->next->next = create_node(6);

    printf("Original List 1:\n");
    print_list(head1);

    printf("Original List 2:\n");
    print_list(head2);

    head1 = sort(head1);
    printf("Sorted List 1:\n");
    print_list(head1);

    head2 = sort(head2);
    printf("Sorted List 2:\n");
    print_list(head2);

    printf("Reversed list 1 after Sorting:\n");
    head1 = reverse_list(head1);
    print_list(head1);
    printf("Reversed list 2 after Sorting:\n");
    head2 = reverse_list(head2);
    print_list(head2);

    struct ListNode* concatenated_list = concatenate(head1, head2);
    printf("Concatenated List:\n");
    print_list(concatenated_list);



    return 0;
}
